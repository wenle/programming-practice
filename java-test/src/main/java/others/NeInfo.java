/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package others;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class NeInfo implements TBase<NeInfo, NeInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("NeInfo");

  private static final TField TYPE_FIELD_DESC = new TField("type", TType.STRING, (short)1);
  private static final TField API_VERSION_FIELD_DESC = new TField("apiVersion", TType.STRING, (short)2);
  private static final TField PRODUCT_VERSION_FIELD_DESC = new TField("productVersion", TType.STRING, (short)3);
  private static final TField OPTION_FIELD_DESC = new TField("option", TType.STRING, (short)4);

  private String type;
  private String apiVersion;
  private String productVersion;
  private String option;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TYPE((short)1, "type"),
    API_VERSION((short)2, "apiVersion"),
    PRODUCT_VERSION((short)3, "productVersion"),
    OPTION((short)4, "option");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // API_VERSION
          return API_VERSION;
        case 3: // PRODUCT_VERSION
          return PRODUCT_VERSION;
        case 4: // OPTION
          return OPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new FieldMetaData("type", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.API_VERSION, new FieldMetaData("apiVersion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_VERSION, new FieldMetaData("productVersion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.OPTION, new FieldMetaData("option", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(NeInfo.class, metaDataMap);
  }

  public NeInfo() {
  }

  public NeInfo(
    String type,
    String apiVersion,
    String productVersion,
    String option)
  {
    this();
    this.type = type;
    this.apiVersion = apiVersion;
    this.productVersion = productVersion;
    this.option = option;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NeInfo(NeInfo other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetApiVersion()) {
      this.apiVersion = other.apiVersion;
    }
    if (other.isSetProductVersion()) {
      this.productVersion = other.productVersion;
    }
    if (other.isSetOption()) {
      this.option = other.option;
    }
  }

  public NeInfo deepCopy() {
    return new NeInfo(this);
  }

  public void clear() {
    this.type = null;
    this.apiVersion = null;
    this.productVersion = null;
    this.option = null;
  }

  public String getType() {
    return this.type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been asigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getApiVersion() {
    return this.apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }

  public void unsetApiVersion() {
    this.apiVersion = null;
  }

  /** Returns true if field apiVersion is set (has been asigned a value) and false otherwise */
  public boolean isSetApiVersion() {
    return this.apiVersion != null;
  }

  public void setApiVersionIsSet(boolean value) {
    if (!value) {
      this.apiVersion = null;
    }
  }

  public String getProductVersion() {
    return this.productVersion;
  }

  public void setProductVersion(String productVersion) {
    this.productVersion = productVersion;
  }

  public void unsetProductVersion() {
    this.productVersion = null;
  }

  /** Returns true if field productVersion is set (has been asigned a value) and false otherwise */
  public boolean isSetProductVersion() {
    return this.productVersion != null;
  }

  public void setProductVersionIsSet(boolean value) {
    if (!value) {
      this.productVersion = null;
    }
  }

  public String getOption() {
    return this.option;
  }

  public void setOption(String option) {
    this.option = option;
  }

  public void unsetOption() {
    this.option = null;
  }

  /** Returns true if field option is set (has been asigned a value) and false otherwise */
  public boolean isSetOption() {
    return this.option != null;
  }

  public void setOptionIsSet(boolean value) {
    if (!value) {
      this.option = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case API_VERSION:
      if (value == null) {
        unsetApiVersion();
      } else {
        setApiVersion((String)value);
      }
      break;

    case PRODUCT_VERSION:
      if (value == null) {
        unsetProductVersion();
      } else {
        setProductVersion((String)value);
      }
      break;

    case OPTION:
      if (value == null) {
        unsetOption();
      } else {
        setOption((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case API_VERSION:
      return getApiVersion();

    case PRODUCT_VERSION:
      return getProductVersion();

    case OPTION:
      return getOption();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case API_VERSION:
      return isSetApiVersion();
    case PRODUCT_VERSION:
      return isSetProductVersion();
    case OPTION:
      return isSetOption();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NeInfo)
      return this.equals((NeInfo)that);
    return false;
  }

  public boolean equals(NeInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_apiVersion = true && this.isSetApiVersion();
    boolean that_present_apiVersion = true && that.isSetApiVersion();
    if (this_present_apiVersion || that_present_apiVersion) {
      if (!(this_present_apiVersion && that_present_apiVersion))
        return false;
      if (!this.apiVersion.equals(that.apiVersion))
        return false;
    }

    boolean this_present_productVersion = true && this.isSetProductVersion();
    boolean that_present_productVersion = true && that.isSetProductVersion();
    if (this_present_productVersion || that_present_productVersion) {
      if (!(this_present_productVersion && that_present_productVersion))
        return false;
      if (!this.productVersion.equals(that.productVersion))
        return false;
    }

    boolean this_present_option = true && this.isSetOption();
    boolean that_present_option = true && that.isSetOption();
    if (this_present_option || that_present_option) {
      if (!(this_present_option && that_present_option))
        return false;
      if (!this.option.equals(that.option))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type);

    boolean present_apiVersion = true && (isSetApiVersion());
    builder.append(present_apiVersion);
    if (present_apiVersion)
      builder.append(apiVersion);

    boolean present_productVersion = true && (isSetProductVersion());
    builder.append(present_productVersion);
    if (present_productVersion)
      builder.append(productVersion);

    boolean present_option = true && (isSetOption());
    builder.append(present_option);
    if (present_option)
      builder.append(option);

    return builder.toHashCode();
  }

  public int compareTo(NeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    NeInfo typedOther = (NeInfo)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiVersion()).compareTo(typedOther.isSetApiVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiVersion()) {
      lastComparison = TBaseHelper.compareTo(this.apiVersion, typedOther.apiVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductVersion()).compareTo(typedOther.isSetProductVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductVersion()) {
      lastComparison = TBaseHelper.compareTo(this.productVersion, typedOther.productVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOption()).compareTo(typedOther.isSetOption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOption()) {
      lastComparison = TBaseHelper.compareTo(this.option, typedOther.option);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TYPE
          if (field.type == TType.STRING) {
            this.type = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // API_VERSION
          if (field.type == TType.STRING) {
            this.apiVersion = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PRODUCT_VERSION
          if (field.type == TType.STRING) {
            this.productVersion = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // OPTION
          if (field.type == TType.STRING) {
            this.option = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeString(this.type);
      oprot.writeFieldEnd();
    }
    if (this.apiVersion != null) {
      oprot.writeFieldBegin(API_VERSION_FIELD_DESC);
      oprot.writeString(this.apiVersion);
      oprot.writeFieldEnd();
    }
    if (this.productVersion != null) {
      oprot.writeFieldBegin(PRODUCT_VERSION_FIELD_DESC);
      oprot.writeString(this.productVersion);
      oprot.writeFieldEnd();
    }
    if (this.option != null) {
      oprot.writeFieldBegin(OPTION_FIELD_DESC);
      oprot.writeString(this.option);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NeInfo(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("apiVersion:");
    if (this.apiVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.apiVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productVersion:");
    if (this.productVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.productVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("option:");
    if (this.option == null) {
      sb.append("null");
    } else {
      sb.append(this.option);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

